# /---------------------------------------------------------------------------
# littleAdjustmentMap: (NotRequired - Default map:{})
#
# The various settings about a little adjustment.
#
# o isAvailableAddingSchemaToTableSqlName: (NotRequired - Default false)
# o isAvailableAddingCatalogToTableSqlName: (NotRequired - Default false)
# o isAvailableDatabaseDependency: (NotRequired - Default false)
# o isAvailableDatabaseNativeJDBC: (NotRequired - Default false)
# o isAvailableNonPrimaryKeyWritable: (NotRequired - Default false)
# o isCheckSelectedClassification: (NotRequired - Default false)
# o isForceClassificationSetting: (NotRequired - Default false)
# o isMakeEntityChaseRelation: (NotRequired - Default false)
# o isEntityConvertEmptyStringToNull: (NotRequired - Default false)
# o isMakeConditionQueryEqualEmptyString: (NotRequired - Default false)
# o isPagingCountLater: (NotRequired - Default true)
# o isPagingCountLeastJoin: (NotRequired - Default true)
# o isInnerJoinAutoDetect: (NotRequired - Default false)
# o isTableDispNameUpperCase: (NotRequired - Default false)
# o isTableSqlNameUpperCase: (NotRequired - Default false)
# o isColumnSqlNameUpperCase: (NotRequired - Default false)
# o isMakeDeprecated: (NotRequired - Default false)
# o isMakeRecentlyDeprecated: (NotRequired - Default true)
# o extendedDBFluteInitializerClass: (NotRequired - Default '')
# o extendedImplementedInvokerAssistantClass: (NotRequired - Default '')
# o extendedImplementedCommonColumnAutoSetupperClass: (NotRequired - Default '')
# o extendedS2DaoSettingClass: (NotRequired - Default '')
# o shortCharHandlingMode: (NotRequired - Default NONE)
# o quoteTableNameList: (NotRequired - Default list:{})
# o quoteColumnNameList: (NotRequired - Default list:{})
# o relationalNullObjectMap: (NotRequired - Default map:{})
# o cursorSelectFetchSize: (NotRequired - Default null)
#
# *The line that starts with '#' means comment-out.
#
map:{
    # _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    # Migration to Java8 DBFlute
    # http://d.hatena.ne.jp/jflute/20140530/java8
    # _/_/_/_/_/_/_/_/_/
    # compile compatible (true if compatible)
    ; isCompatibleSelectByPKOldStyle = true
    ; isCompatibleSelectByPKPlainReturn = true
    ; isCompatibleSelectByPKWithDeletedCheck = true
    ; isMakeConditionQueryExistsReferrerToOne = true
    ; isMakeConditionQueryInScopeRelationToOne = true
    ; isMakeConditionQueryPlainListManualOrder = true
    ; isMakeDirectConditionBeanSetup = true
    #; makeDirectConditionBeanSetupTableList = list:{}
    ; isMakeBatchUpdateSpecifyColumn = true
    ; isAvailableSelectEntityPlainReturn = true
    #; availableSelectEntityPlainReturnTableList = list:{ MEMBER ; MEMBER_STATUS ; MEMBER_LOGIN ; PURCHASE }
    ; isAvailableRelationPlainEntity = true
    ; isMakeConditionQueryPrefixSearch = true
    ; isMakeConditionQueryDateFromTo = true
    ; isMakeDirectConditionOptionSetup = true
    ; isMakeDirectConditionManualOrder = true
    ; isMakeClassificationNativeTypeSetter = true
    ; isCompatibleNewMyEntityConditionBean = true
    ; isCompatibleDeleteNonstrictIgnoreDeleted = true
    ; isCompatibleLoadReferrerOldOption = true
    ; isCompatibleConditionBeanAcceptPKOldStyle = true
    ; isCompatibleConditionBeanOldNamingCheckInvalid = true
    ; isCompatibleConditionBeanOldNamingOption = true
    ; isCompatibleBizOneToOneImplicitReverseFkAllowed = true
    ; isCompatibleReferrerCBMethodIdentityNameListSuffix = true
    ; isCompatibleOutsideSqlFacadeChainOldStyle = true
    ; isCompatibleOutsideSqlSqlCommentCheckDefault = true
    ; isCompatibleSelectScalarOldName = true

    # compile compatible (false if compatible)
    ; isMakeCallbackConditionBeanSetup = false
    ; isEntityDerivedMappable = false
    ; isMakeCallbackConditionOptionSetup = false
    ; isMakeCallbackConditionManualOrder = false
    ; isAvailableJava8TimeLocalDateEntity = false

    # _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    #
    # runtime compatible (true if compatible)
    # 実行時の挙動の互換オプション (trueなら互換状態)
    #
    # _/_/_/_/_/_/_/_/_/_/
    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # cb.query().set... でnull指定したときに例外にせず素通りにする互換オプション。
    # Java8版からは素通り非推奨ということで、本来はfalseにしたい。
    #
    # << 移行手順 >> @since 1.2.7
    # isInvalidQueryAllowedWarning=true でwarningログを出せるので、
    # warningログが出なくなったらfalse(orコメントアウト)にして移行完了。
    # - - - - - - - - - -/
    ; isNullOrEmptyQueryAllowed = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # cb.query().set... で同じカラムに同じ条件の2回呼び出しで例外にせず上書きにする互換オプション。
    # Java8版からは上書き非推奨ということで、本来はfalseにしたい。
    #
    # << 移行手順 >> @since 1.2.7
    # isInvalidQueryAllowedWarning=true でwarningログを出せるので、
    # warningログが出なくなったらfalse(orコメントアウト)にして移行完了。
    # - - - - - - - - - -/
    ; isOverridingQueryAllowed = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # InvalidQueryが発生したらwarningログが出るようになる移行支援オプション。@since 1.2.7
    # このwarningログを使って該当箇所にif文などを入れるなり実装調整をして少しずつ移行すると良い。
    # このログが全く出なくなってOKと判断したら、対象のallowed系のプロパティをfalseにする。
    # 対象のallowed系のプロパティがすべてfalseになったらこのプロパティもfalseにする。
    # 
    # InvalidQueryは以下を含む:
    #  o NullOrEmptyQuery :: #nullOrEmpty_query
    #  o OverridingQuery :: #overriding_query
    #  o FromToOneSideのNullOrEmpty :: #nullOrEmpty_query
    # 上記のハッシュタグでログを検索できる。
    # - - - - - - - - - -/
    ; isInvalidQueryAllowedWarning = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # SpecifyColumnしてないカラムをgetしてしまったときに例外にしない互換オプション。
    # specify()してないカラムをgetしていたら基本的にアプリの不具合と言えるので、本来はfalseにしたい。
    #
    # << 移行手順 >> @since 1.2.7
    # このAllowedプロパティはfalseにした上で、
    # isNonSpecifiedColumnAccessWarningOnly=true にするとwarningログだけが出力されるので、
    # それで実装調整をしたらWarningOnlyの方もfalse(orコメントアウト)にして移行完了。
    # ハッシュタグは: #nonSpecifiedColumn_access
    # - - - - - - - - - -/
    ; isNonSpecifiedColumnAccessAllowed = false
    ; isNonSpecifiedColumnAccessWarningOnly = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # fromTo で op.allowOneSide() が自動付与されて、未指定でもnull指定を素通りにする互換オプション。
    # isNullOrEmptyQueryAllowedがtrueであれば、どのみちnull許容されるので関係ない。
    #
    # << 移行手順 >> @since 1.2.7
    # (isNullOrEmptyQueryAllowedがtrueであることを前提に)
    # こちらも isInvalidQueryAllowedWarning=true でnull指定のログが出るので、
    # それで確認をしてif文やallowOneSide()の実装調整をしてからfalse(orコメントアウト)にすると移行完了。
    # - - - - - - - - - -/
    ; isCompatibleConditionBeanFromToOneSideAllowed = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # orScopeQuery()にて、orCBでsetupSelectなどのorと無関係の操作を例外ではなく素通りにする互換オプション。
    # orCBも単なるcbなので動いてしまうが、可読性的に良くないので、本来はfalseにしたい。
    #
    # << 移行手順 >> @since 1.2.7
    # このプロパティをfalseにした上で、isOrScopeQueryPurposeCheckWarningOnlyをtrueにすると、
    # チェックはされるけれども例外ではなくwarningログが出力されるようになる。
    # そのwarningログを確認して実装調整を行ってログが出なくなったら、
    # WarningOnlyはfalse(orコメントアウト)にして移行完了。
    # ハッシュタグは: #cb_purpose_check
    # - - - - - - - - - -/
    ; isCompatibleOrScopeQueryPurposeNoCheck = false
    ; isOrScopeQueryPurposeCheckWarningOnly = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # 区分値定義していないコードがDBに含まれていたときに、select時に例外にせず素通りにする互換オプション。
    # 基本的にはアプリ的におかしい状況なので、素通りせずに何かしらのチェック(例外 or ログ)は掛けたい。
    #
    # << 移行手順 >>
    # 区分値の undefinedHandlingType が LOGGING(デフォルト) で統一されていれば、
    # このプロパティは false にして実行時のログを確認してDB修正してからfalseにすると移行完了。
    # (FK制約の掛かってる区分値では基本発生しないので、暗黙の区分値が対象)
    #
    # もし、isCheckSelectedClassification=true ならすでに例外チェックされているので、
    # このプロパティは関係ない。その場合は気にせずfalse(orコメントアウト)にして良い。
    # - - - - - - - - - -/
    ; isSuppressDefaultCheckClassificationCode = true

    # _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    #
    # runtime compatible (false if compatible)
    # 実行時の挙動の互換オプション (false)
    #
    # _/_/_/_/_/_/_/_/_/_/
    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # cbを「そのタイミングじゃないでしょ」ってときに使ったりしたときに例外にしない互換オプション。
    # 例えば基点のcbをExistsReferrerのコールバックの中で使ったりしたときなど。
    # 可読性的に良くないので基本trueにしてチェックを入れたい。
    #
    # << 移行手順 >> @since 1.2.7
    # このプロパティをtrueにした上で、isThatsBadTimingWarningOnlyをtrueにすると、
    # チェックはされるけれども例外ではなくwarningログが出力されるようになる。
    # そのwarningログを確認して実装調整を行ってログが出なくなったら、
    # WarningOnlyはfalse(orコメントアウト)にして移行完了。
    # ハッシュタグは: #thats_badTiming
    # - - - - - - - - - -/
    ; isThatsBadTimingDetect = true
    ; isThatsBadTimingWarningOnly = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableAddingSchemaToTableSqlName: (NotRequired - Default false)
    #   [true]
    #     Add schema to table SQL name. (The table name on query is SCHEMA.TABLE)
    #
    #   [false]
    #     Non.
    #
    #; isAvailableAddingSchemaToTableSqlName = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableAddingCatalogToTableSqlName: (NotRequired - Default false)
    #   [true]
    #     Add catalog to table SQL name. (The table name on query is CATALOG.SCHEMA.TABLE)
    #     This property works only when isAvailableAddingSchemaToTableSqlName is true.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableAddingCatalogToTableSqlName = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableDatabaseDependency: (NotRequired - Default false)
    #   [true]
    #     Generate the method that depends on the database.
    #     For example: cb.lockWithRR() at DB2.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableDatabaseDependency = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableDatabaseNativeJDBC: (NotRequired - Default false)
    #   [true]
    #     Use classes of database native JDBC on generated classes
    #     to get best performances of DB access.
    #     Your project needs to refer to database native JDBC.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableDatabaseNativeJDBC = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableNonPrimaryKeyWritable: (NotRequired - Default false)
    #   [true]
    #     Generate writable methods at non-primary-key table.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableNonPrimaryKeyWritable = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isCheckSelectedClassification: (NotRequired - Default false)
    #   [true]
    #     Check a code of a column related to classification
    #     whether it's one of classification when it's selected.
    #     If wrong, throws an exception (when selecting).
    #
    #   [false]
    #     Non.
    #
    #; isCheckSelectedClassification = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isForceClassificationSetting: (NotRequired - Default false)
    #   [true]
    #     Force developer to set a code of a column related to classification
    #     by classification type-safe method of Entity and ConditionBean.
    #     A setter method of original type becomes 'protected' scope.
    #
    #   [false]
    #     Non.
    #
    #; isForceClassificationSetting = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeEntityChaseRelation: (NotRequired - Default false)
    #   [true]
    #     Make chase-relation methods of entity.
    #     For example: member.chaseMemberStatus().getMemberStatusName()
    #     This statement doesn't have a null pointer if the MemberStatus doesn't exist.
    #
    #   [false]
    #     Non.
    #
    #; isMakeEntityChaseRelation = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isEntityConvertEmptyStringToNull: (NotRequired - Default false)
    #   [true]
    #     Convert empty-string data to null in entity.
    #
    #   [false]
    #     Non.
    #
    #; isEntityConvertEmptyStringToNull = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeConditionQueryEqualEmptyString: (NotRequired - Default false)
    #   [true]
    #     Make equal-empty-string methods of condition-query.
    #     For example: cb.query().setMemberName_Equal_EmptyString()
    #
    #   [false]
    #     Non.
    #
    #; isMakeConditionQueryEqualEmptyString = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isPagingCountLater: (NotRequired - Default true)
    #   [true]
    #     The count SQL for paging are executed after paging main select.
    #
    #   [false]
    #     Non.
    #
    #; isPagingCountLater = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isPagingCountLeastJoin: (NotRequired - Default true)
    #   [true]
    #     Join statements in count SQL of paging select are trimmed
    #     for performance tuning. (only countable joins are valid)
    #
    #   [false]
    #     Non.
    #
    #; isPagingCountLeastJoin = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isInnerJoinAutoDetect: (NotRequired - Default true)
    #   [true]
    #     Joins that can be inner-join on condition-bean are auto-detected
    #     for performance tuning. (DBFlute uses NotNull constraint info)
    #
    #   [false]
    #     Non.
    #
    #; isInnerJoinAutoDetect = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isTableDispNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Table names for display, e.g. on documents,
    #     are forcedly treated as upper case.
    #
    #   [false]
    #     Non.
    #
    #; isTableDispNameUpperCase = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isTableSqlNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Table names on SQL executed by condition-bean or behavior
    #     are forcedly treated as upper case. (except outside-SQL)
    #
    #   [false]
    #     Non.
    #
    #; isTableSqlNameUpperCase = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isColumnSqlNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Column names on SQL executed by condition-bean or behavior
    #     are forcedly treated as upper case. (except outside-SQL)
    #
    #   [false]
    #     Non.
    #
    #; isColumnSqlNameUpperCase = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeDeprecated: (NotRequired - Default false)
    #   [true]
    #     Make deprecated method and class and so on...
    #     *You should specify this property 'false'!
    #
    #   [false]
    #     Non.
    #
    #; isMakeDeprecated = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeRecentlyDeprecated: (NotRequired - Default true)
    #   [true]
    #     Make RECENTLY deprecated method and class and so on...
    #     *You should specify this property 'false'!
    #
    #   [false]
    #     Non.
    #
    #; isMakeRecentlyDeprecated = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedDBFluteInitializerClass: (NotRequired - Default '')
    #  If you want to extend the embedded DBFlute initializer,
    #  specify the class name of your original initializer
    #  that extends the embedded one.
    #  *Basically for fixed DBFluteConfig settings
    #
    # @JavaOnly
    #; extendedDBFluteInitializerClass = com.example.ExtendedDBFluteInitializer
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedImplementedInvokerAssistantClass: (NotRequired - Default '')
    #  If you want to extend the embedded invoker assistant,
    #  specify the class name of your original invoker assistant
    #  that extends the embedded one.
    #  *Basically you SHOULD NOT specify this property!
    #
    # @JavaOnly
    #; extendedImplementedInvokerAssistantClass = com.example.ExtendedImplementedInvokerAssistant
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedImplementedCommonColumnAutoSetupperClass: (NotRequired - Default '')
    #  If you want to extend the embedded common column auto setupper,
    #  specify the class name of your original common column auto setupper
    #  that extends the embedded one.
    #  *Basically you SHOULD NOT specify this property!
    #
    # @JavaOnly
    #; extendedImplementedCommonColumnAutoSetupperClass = com.example.ExtendedImplementedCommonColumnAutoSetupper
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedS2DaoSettingClass: (NotRequired - Default '')
    #  If you want to extend the embedded S2Dao setting,
    #  specify the class name of your original S2Dao setting
    #  that extends the embedded one.
    #  *Basically you SHOULD NOT specify this property!
    #
    # @CSharpOnly
    #; extendedS2DaoSettingClass = Com.Example.ExtendedS2DaoSetting
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o shortCharHandlingMode: (NotRequired - Default NONE)
    #  If the parameter of condition-bean or parameter-bean has short size,
    #   NONE - Do nothing. (default)
    #   EXCEPTION - It throws an exception.
    #   RFILL - It fills the parameter by right spaces.
    #   LFILL - It fills the parameter by left spaces.
    #
    #; shortCharHandlingMode = NONE
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o quoteTableNameList: (NotRequired - Default list:{})
    #  The list of table DB names that need to be quoted.
    #  Specified tables is quoted on auto-generated SQL.
    #
    #; quoteTableNameList = list:{}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o quoteColumnNameList: (NotRequired - Default list:{})
    #  The list of column DB names that need to be quoted.
    #  Specified columns is quoted on auto-generated SQL.
    #
    #; quoteColumnNameList = list:{}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o relationalNullObjectMap: (NotRequired - Default map:{})
    #  You can get a null object when the relation is null.
    #
    #; relationalNullObjectMap = map:{
    #    ; providerPackage = $$packageBase$$.nogen.cache
    #    ; foreignMap = map:{
    #        ; MEMBER_STATUS = CachedMemberStatus.get($$PrimaryKey$$)
    #        ; MEMBER_SECURITY = CachedMemberSecurity.get($$PrimaryKey$$)
    #    }
    #}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o cursorSelectFetchSize: (NotRequired - Default null)
    #  The fetch size of JDBC parameter for cursor select.
    #  For example, specify Integer.MIN_VALUE to enable fetch of MySQL.
    #
    #; cursorSelectFetchSize = Integer.MIN_VALUE
    # - - - - - - - - - -/
}
# ----------------/